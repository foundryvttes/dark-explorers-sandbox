{"name":"Ouija Board Control","type":"script","author":"5O9nsbN12pwBkhtz","img":"icons/tools/scribal/lens-grey-brown.webp","scope":"global","command":"// ---------------------------\n// MAP\nconst letter_a = { x: 231.1892510005717, y: 445.45454545454555 }; // ok\nconst letter_b = { x: 292.1097770154374, y: 404.8885077186964 }; // ok\nconst letter_c = { x: 349.28530588907967, y: 379.0451686678102 }; // ok\nconst letter_d = { x: 404.3739279588336, y: 361.1206403659233 };\nconst letter_e = { x: 461.7209834190966, y: 348.8564894225272 };\nconst letter_f = { x: 514.9228130360204, y: 336.79245283018867 }; // ok\nconst letter_g = { x: 577.1869639794168, y: 333.96226415094344 };\nconst letter_h = { x: 637.9073756432248, y: 333.01886792452837 };\nconst letter_i = { x: 691.1092052601487, y: 334.9056603773585 };\nconst letter_j = { x: 738.8507718696399, y: 340.3659233847914 };\nconst letter_k = { x: 801.2864493996568, y: 353.94511149228146 };\nconst letter_l = { x: 862.607204116638, y: 375.2715837621499 };\nconst letter_m = { x: 928.2447112635791, y: 402.42995997712984 };\nconst letter_n = { x: 999.5425957690106, y: 437.70726129216706 };\nconst letter_o = { x: 257.8044596912522, y: 517.3241852487137 };\nconst letter_p = { x: 311.0062893081762, y: 490.53744997141234 }; // ok\nconst letter_q = { x: 373.0703259005145, y: 467.52429959977144 };\nconst letter_r = { x: 433.2475700400228, y: 447.54145225843365 };\nconst letter_s = { x: 495.31160663236125, y: 430.9319611206406 }; // ok\nconst letter_t = { x: 550.7718696397942, y: 422.2698684962837 };\nconst letter_u = { x: 612.264150943396, y: 419.81132075471714 };\nconst letter_v = { x: 679.4168096054887, y: 418.29616923956564 };\nconst letter_w = { x: 758.8336192109775, y: 434.13379073756437 };// ok\nconst letter_x = { x: 848.1132075471695, y: 463.2075471698115 };\nconst letter_y = { x: 914.1509433962261, y: 489.6226415094342 };\nconst letter_z = { x: 971.698113207547, y: 522.6415094339625 };\n\nconst number_1 = { x: 340.8233276157804, y: 591.8524871355062 };\nconst number_2 = { x: 394.9685534591192, y: 591.2807318467698 };\nconst number_3 = { x: 453.2590051457976, y: 594.8827901658092 };\nconst number_4 = { x: 512.2927387078329, y: 597.7129788450545 };\nconst number_5 = { x: 570.583190394511, y: 596.9696969696971 };\nconst number_6 = { x: 627.3584905660376, y: 599.0566037735852 };\nconst number_7 = { x: 679.5883361921095, y: 594.139508290452 };\nconst number_8 = { x: 735.4202401372212, y: 592.9959977129793 };\nconst number_9 = { x: 791.8238993710692, y: 590.5374499714126 };\nconst number_0 = { x: 860.491709548313, y: 591.109205260149 };\n\nconst symbol_yes = { x: 321.5551743853629, y: 229.81703830760478 };\nconst symbol_no = { x: 906.7467124070897, y: 227.73013150371685 };\n\nconst symbol_space = { x: 603.7735849056602, y: 233.96226415094372 };\n\nconst symbol_01 = { x: 608.3190394511147, y: 697.5986277873074 };\nconst symbol_02 = { x: 639.9536577292289, y: 699.8675935120822 };\nconst symbol_03 = { x: 639.9536577292289, y: 699.8675935120822 };\nconst symbol_04 = { x: 639.9536577292289, y: 699.8675935120822 };\nconst symbol_05 = { x: 639.9536577292289, y: 699.8675935120822 };\nconst symbol_06 = { x: 639.9536577292289, y: 699.8675935120822 };\n\nconst bottomLocation = { x: 607.1601354620223, y: 785.2926947266571 };\n\n// YOU CAN TRY TO MESS WITH THIS \nlet soundToPlay = 'modules/ouija-board-for-sequencer/assets/sounds/distant-orchestra.ogg';\nlet animation = 'modules/animated-spell-effects-cartoon/spell-effects/cartoon/mix/electric_ball_CIRCLE_09.webm';\n\nlet soundToPlayEnd = 'modules/ouija-board-for-sequencer/assets/sounds/intensive-stare.ogg';\nlet animationEnd = 'modules/animated-spell-effects-cartoon/spell-effects/cartoon/misc/demon_face_SQUARE.webm';\n\n/* Ouija Board Control\n\nSource: \nIcon: icons/tools/scribal/lens-grey-brown.webp\n*/\n\nconst debug = true;\nconst version =  'v1.3';\nlet tokenD;\n\nif (canvas.tokens.controlled[0]===undefined){\n  ui.notifications.error(\"You must select a token!\");    \n} else {\n  tokenD=canvas.tokens.controlled[0];\n  main();\n}\n\n\nfunction main() {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz0123456789'.split('');\n  let alphabetList = ``;\n  let special = 'yes,no'.split(',');\n  alphabet = alphabet.concat(special); \n  alphabet.map((t) => {\n    alphabetList += `<input type=\"radio\" id=\"${t}\" name=\"target\" value=\"${t}\"><label for=\"${t}\">${t} </label>`;\n  });\n\n  let choosenMessage = chooseMessage();\n\n  let template = `  \n    <style type=\"text/css\">\n      div.purpleHorizon {\n        border: 4px solid #ff0000;\n        background-color: #000000;\n        width: 100%;\n        text-align: center;\n        border-collapse: collapse;\n      }\n      .divTable.purpleHorizon .divTableCell, .divTable.purpleHorizon .divTableHead {\n        border: 0px solid #550000;\n        padding: 5px 2px;\n      }\n      .divTable.purpleHorizon .divTableBody .divTableCell {\n        font-size: 13px;\n        font-weight: bold;\n        color: #FFFFFF;\n      }\n      \n      .divTable{ display: table; }\n      .divTableRow { display: table-row; }\n      .divTableHeading { display: table-header-group;}\n      .divTableCell, .divTableHead { display: table-cell;}\n      .divTableHeading { display: table-header-group;}\n      .divTableFoot { display: table-footer-group;}\n      .divTableBody { display: table-row-group;}\n\n      /* RADIO */\n      [type=radio] { \n        background-color:white;      \n      }\n\n      /* IMAGE STYLES */\n      [type=radio] + img {\n      cursor: pointer;\n      }\n\n      /* CHECKED STYLES */\n      [type=radio]:checked + img {\n      outline: 4px solid #f00;\n      }\n      \n      .container {\n        position: relative;\n        text-align: center;\n        color: white;\n      }\n      /* Centered text */\n      .centered {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 18px;\n      }    \n\n      #kultcss .window-content {    \n        background: #000000;\n      }     \n      #kultcss .dialog-button {\n        height: 40px;\n        background: #000000;\n        color: #ffffff;\n        justify-content: space-evenly;\n        align-items: center;\n        cursor: pointer;\n        border: none;    \n      }  \n      #kultcss header {\n        background: #000000;\n        border-radius: 0;    \n        border: none;    \n        margin-bottom: 2px;\n        font-size: .75rem;\n      }\n    </style>    \n    \n    <div class=\"divTable purpleHorizon\">\n    <div class=\"divTableBody\">\n    \n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>${choosenMessage}</p>\n    </div>\n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <p>Message</p>\n        <input id=\"message\" type=\"text\" style=\"width: 320px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=\"wasp\">       \n    </div>\n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n      <p>Choose instead of the message:</p>\n      <input type=\"radio\" id=\"position_yes\" name=\"extra_position\" value=\"message\" checked=\"checked>\n      <label for=\"support_0\">Message</label>      \n      <input type=\"radio\" id=\"position_yes\" name=\"extra_position\" value=\"position_yes\">\n      <label for=\"support_0\">Yes</label>\n      <input type=\"radio\" id=\"position_no\" name=\"extra_position\" value=\"position_no\">\n      <label for=\"support_1\">No</label>  \n      <input type=\"radio\" id=\"position_01\" name=\"extra_position\" value=\"position_01\">\n      <label for=\"support_1\">Extra 01</label>  \n      <input type=\"radio\" id=\"position_02\" name=\"extra_position\" value=\"position_02\">\n      <label for=\"support_1\">Extra 02</label>        \n      <input type=\"radio\" id=\"position_03\" name=\"extra_position\" value=\"position_03\">\n      <label for=\"support_1\">Extra 03</label>  \n      <input type=\"radio\" id=\"position_04\" name=\"extra_position\" value=\"position_04\">\n      <label for=\"support_1\">Extra 04</label>  \n      <input type=\"radio\" id=\"position_05\" name=\"extra_position\" value=\"position_05\">\n      <label for=\"support_1\">Extra 05</label>  \n      <input type=\"radio\" id=\"position_06\" name=\"extra_position\" value=\"position_06\">\n      <label for=\"support_1\">Extra 06</label>        \n    </div>\n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n      <label for=\"movetype\">Move Type: <select id=\"movetype\" style=\"width: 250px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\">\n      <option value=\"moveType1\">Type 1</option>\n      <option value=\"moveType2\">Type 2 - No Sound</option>\n      <option value=\"moveType3\">Type 3 - Animation</option>\n      <option value=\"moveType4\">Type 4 - End</option>\n      </select></label>\n    </div>\n    </div>\n\n    <div class=\"divTableRow\">\n    <div class=\"divTableCell\">\n        <label for=\"extraTime\">Delay (ms): \n        <input id=\"extraTime\" type=\"number\" min=1 max=5000 style=\"width: 80px; box-sizing: border-box;border: none;background-color: #ff0000;color: white; text-align: center;\" value=1></label>   \n    </div>\n    </div>\n\n    </div>\n    </div>    \n  `;\n\n  new Dialog({\n    title: `Ouija - ${version}`,\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Move\",\n        callback: async (html) => {\n          moveThing(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n  }).render(true);\n}\n\nasync function moveThing(html) {  \n  let msg = '';  \n  let letter = html.find('input[name=\"target\"]:checked').val();\n  const movetype = html.find('#movetype')[0].value;\n  let autoMessage =  html.find(\"#message\")[0].value;   \n  let extraTime =  html.find(\"#extraTime\")[0].value;   \n  let messageType = html.find('input[name=\"extra_position\"]:checked').val();\n  const moveFunction = await selectMoveFunction(movetype);\n\n  if ( messageType=='message' ) { // message\n    sendMessage(autoMessage.toLowerCase(), moveFunction, extraTime);\n  } else { // extra_position\n    sendToPosition(messageType.toLowerCase(), moveFunction, extraTime);\n  } \n}\n\nasync function move3(position, extraTime=1) {\n  let sequence = new Sequence()      \n    .animation()\n        .on(tokenD)\n        .duration(1000)\n        .moveTowards(position, { ease: \"easeInOutCubic\" } )\n        .rotateTowards(bottomLocation, { duration: 1000, ease: \"easeInOutCubic\" })             \n        .waitUntilFinished()\n    .sound(soundToPlay)\n    .effect()\n      .file(animation)\n      .atLocation(tokenD)\n      .scale(0.55)\n      .waitUntilFinished()        \n    .wait(extraTime);\n\n  await sequence.play();  \n}\n\nasync function move2(position, extraTime=1) {\n  let sequence = new Sequence()      \n    .animation()\n        .on(tokenD)\n        .duration(1000)\n        .moveTowards(position, { ease: \"easeInOutCubic\" } )\n        .rotateTowards(bottomLocation, { duration: 1000, ease: \"easeInOutCubic\" })             \n        .waitUntilFinished()\n    .wait(extraTime);\n\n  await sequence.play();  \n}\n\nasync function move(position, extraTime=1) {\n  let sequence = new Sequence()      \n    .animation()\n        .on(tokenD)\n        .duration(1000)\n        .moveTowards(position, { ease: \"easeInOutCubic\" } )\n        .rotateTowards(bottomLocation, { duration: 1000, ease: \"easeInOutCubic\" })             \n        .waitUntilFinished()\n    .sound(soundToPlay)\n    .wait(200)\n    .wait(extraTime);\n\n  await sequence.play();  \n}\n\nasync function moveEnd(position, extraTime=1) {\n  let sequence = new Sequence()      \n    .animation()\n        .on(tokenD)\n        .duration(1000)\n        .moveTowards(position, { ease: \"easeInOutCubic\" } )\n        .rotateTowards(bottomLocation, { duration: 1000, ease: \"easeInOutCubic\" })             \n        .waitUntilFinished()\n    .sound(soundToPlayEnd)\n    .effect()\n      .file(animationEnd)\n      .atLocation(tokenD)\n      .scale(0.55)\n      .waitUntilFinished()        \n    .wait(extraTime);\n\n  await sequence.play();  \n}\n\nasync function sendMessage(text, moveFunction, extraTime=1) {\n  let message = text.split('');\n  \n  for (let index = 0; index < message.length; index++) {\n    const myMessage = message[index];\n    const output = await moveFunction(sceneMap(myMessage), extraTime);\n  }\n}\n\nasync function sendToPosition(text, moveFunction, extraTime=1) {\n  await moveFunction(sceneMap(text), extraTime);\n}\n\nasync function selectMoveFunction(moveType) {\n  if (moveType=='moveType1') {\n    return move;\n  } else if (moveType=='moveType2') {\n    return move2;\n  } else if (moveType=='moveType3') {\n    return move3;\n  } else if (moveType=='moveType4') {\n    return moveEnd;\n  }  \n}\n\n// ================================================================\nfunction sceneMap(message) {\n// canvas.tokens.controlled[0].position.x\n// canvas.tokens.controlled[0].position.y\n\n  // 1 char\n  switch (message) {\n    case 'a': return letter_a; // ok\n    case 'b': return letter_b; // ok\n    case 'c': return letter_c; // ok\n    case 'd': return letter_d;      \n    case 'e': return letter_e;\n    case 'f': return letter_f; // ok           \n    case 'g': return letter_g;      \n    case 'h': return letter_h;      \n    case 'i': return letter_i;      \n    case 'j': return letter_j;      \n    case 'k': return letter_k;      \n    case 'l': return letter_l;      \n    case 'm': return letter_m;      \n    case 'n': return letter_n;\n    case 'o': return letter_o;\n    case 'p': return letter_p; // ok\n    case 'q': return letter_q;\n    case 'r': return letter_r;\n    case 's': return letter_s; // ok\n    case 't': return letter_t;\n    case 'u': return letter_u;\n    case 'v': return letter_v;\n    case 'x': return letter_x;\n    case 'z': return letter_z;\n    case 'w': return letter_w; // ok\n    case 'y': return letter_y;     \n    case '0': return number_0;\n    case '1': return number_1;\n    case '2': return number_2;\n    case '3': return number_3;\n    case '4': return number_4;\n    case '5': return number_5;\n    case '6': return number_6;\n    case '7': return number_7;\n    case '8': return number_8;\n    case '9': return number_9;\n    case ' ': return symbol_space;    \n    case 'position_yes':  return symbol_yes;\n    case 'position_no':   return symbol_no;\n    case 'position_01':   return symbol_01;\n    case 'position_02':   return symbol_02;\n    case 'position_03':   return symbol_03;\n    case 'position_04':   return symbol_04;\n    case 'position_05':   return symbol_05;\n    case 'position_06':   return symbol_06;\n    default: ui.notifications.error(\"666!\");    \n  }\n}\n\nfunction chooseMessage() {\n  let messages = [\n\"Captain Howdy is looking for you\",\n\"Perform the whole ritual in a consecrated circle, so that undesirable spirits cannot interfere with it.\",\n\"Never look behind you while speaking with the dead.\",\n\"Playing with spirits may bring you dire consequences.\"\n]\n  return messages[Math.floor(Math.random() * messages.length)];\n}","folder":null,"sort":0,"permission":{"default":0,"ZhC8ATjW2zJWoMct":3,"5O9nsbN12pwBkhtz":3},"flags":{"core":{"sourceId":"Macro.99v8LiO5NuiZ3b9h"}},"_id":"hJNHsXJprJ2YqJFK"}
